pipeline {
  agent none  // Start with no global agent, so we can define our custom node for each stage

  environment {
    REGISTRY = 'docker.io/avishilon22'
    IMAGE_NAME_BACKEND = 'backend'
    IMAGE_NAME_FRONTEND = 'ci-frontend'
    COMMIT_SHA = "${env.GIT_COMMIT ?: 'latest'}"
  }

  stages {
    stage('Check Compilation') {
      agent {
        kubernetes {
          label 'python-agent'
          defaultContainer 'python'
          containerTemplate(name: 'python', image: 'python:3.9', command: 'sleep', args: 'infinity')
        }
      }
      steps {
        git branch: 'main', url: 'https://github.com/avishilon26/CI-CD.git'
        sh '''
          pip install pytest pytest-cov
          echo "[Backend] Checking syntax..."
          python3 -m py_compile backend/*.py || exit 1
          echo "[Frontend] No compilation needed for static files"
          echo "[Backend] Running pytest..."
          cd backend
          pytest --cov=. > ../backend-coverage.txt || true
          cat ../backend-coverage.txt
          cd ..
        '''
      }
    }

    stage('Build Docker Images') {
      agent {
        kubernetes {
          label 'docker-agent'
          defaultContainer 'docker'
          containerTemplate(name: 'docker', image: 'docker:dind', privileged: true, ttyEnabled: true)
        }
      }
      steps {
        git branch: 'main', url: 'https://github.com/avishilon26/CI-CD.git'
        container('docker') {
          withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh '''
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              
              echo "[Backend] Building and pushing backend image..."
              docker build --network=host --load -t $REGISTRY/$IMAGE_NAME_BACKEND:$COMMIT_SHA ./backend
              docker push $REGISTRY/$IMAGE_NAME_BACKEND:$COMMIT_SHA

              echo "[Frontend] Building and pushing frontend image..."
              docker build --network=host --load -t $REGISTRY/$IMAGE_NAME_FRONTEND:$COMMIT_SHA ./frontend
              docker push $REGISTRY/$IMAGE_NAME_FRONTEND:$COMMIT_SHA
            '''
          }
        }
      }
    }

    stage('Deploy with Helm') {
      agent {
        kubernetes {
          label 'docker-agent'
          defaultContainer 'docker'
          containerTemplate(name: 'docker', image: 'docker:20.10.7-dind', command: 'dockerd-entrypoint.sh', privileged: true, ttyEnabled: true)
        }
      }
      steps {
        sh '''
          helm upgrade --install myapp ./helm \
            --values helm/values.yaml \
            --set frontend.image.repository=$REGISTRY/$IMAGE_NAME_FRONTEND \
            --set frontend.image.tag=$COMMIT_SHA \
            --set backend.image.repository=$REGISTRY/$IMAGE_NAME_BACKEND \
            --set backend.image.tag=$COMMIT_SHA
        '''
      }
    }
  }
}
